//
//  SignInViewController.swift
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.18
//
//

import UIKit
import AWSMobileHubHelper
import GoogleSignIn
import AWSGoogleSignIn

class SignInViewController : UIViewController {
    
    @IBOutlet weak var logoView: UIImageView!
    @IBOutlet weak var tableFormView: UIView!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var signInButton: UIButton!
    @IBOutlet weak var signUpButton: UIButton!
    @IBOutlet weak var forgotPasswordButton: UIButton!
    @IBOutlet weak var facebookButton: UIButton!
    @IBOutlet weak var googleButton: UIButton!
    
    @IBOutlet weak var logoViewHeight: NSLayoutConstraint!
    @IBOutlet weak var orSignInWithLabel: UILabel!
    
    var canCancel : Bool = true
    var didCompleteSignIn: ((_ success: Bool) -> Void)? = nil
    let smallLogoName = "logo-aws-small"
    let bigLogoName = "logo-aws-big"
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // set up the navigation controller
        self.setUpNavigationController()
        // set up the logo in image view
        self.setUpLogo()
        // set up username and password UI if user pools enabled
        self.setUpUserPoolsUI()
        // set up background
        self.setUpBackground()
        // set up facebook button if enabled
        self.setUpFacebookButton()
        // set up google button if enabled
        self.setUpGoogleButton()
    }

    // This is used to dismiss the keyboard, user just has to tap outside the
    // user name and password views and it will dismiss
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        if let touch = touches.first {
            if touch.phase == UITouchPhase.began {
                view.endEditing(true)
            }
        }

        super.touchesBegan(touches , with:event)
    }
    
    func setUpUserPoolsUI() {
        // Since user pools not enabled, hide the UI
        tableFormView.removeFromSuperview()
        orSignInWithLabel.text = "Sign in with"
        signInButton.removeFromSuperview()
        signUpButton.removeFromSuperview()
        forgotPasswordButton.removeFromSuperview()
        view.addConstraint(NSLayoutConstraint(item: orSignInWithLabel, attribute: .top, relatedBy: .equal, toItem: logoView, attribute: .bottom, multiplier: 1, constant: 8.0))
    }
    
    func setUpLogo() {
        logoView.contentMode = UIViewContentMode.center
        logoView.image = UIImage(imageLiteralResourceName: bigLogoName)
        logoViewHeight.constant = 230
        logoView.setNeedsLayout()
        self.view.setNeedsLayout()
        self.view.layoutIfNeeded()
    }
    
    func setUpBackground() {
        self.view.backgroundColor = UIColor.white
    }
    
    func setUpFacebookButton() {
        // Hide facebook button
        facebookButton.removeFromSuperview()
    }
    
    func setUpGoogleButton() {
        AWSGoogleSignInProvider.sharedInstance().setScopes(["profile", "openid"])
        // Google UI Setup
        let googleComponent = AWSGoogleSignInButton(frame: CGRect(x: 0, y: 0, width: googleButton.frame.size.width, height: googleButton.frame.size.height))
        googleComponent.buttonStyle = .large // use the large button style
        googleComponent.delegate = self // set delegate to respond to user actions
        AWSGoogleSignInProvider.sharedInstance().setViewControllerForGoogleSignIn(self)
        googleButton.addSubview(googleComponent)
        view.addConstraint(NSLayoutConstraint(item: googleButton, attribute: .top, relatedBy: .equal, toItem: anchorViewForGoogle(), attribute: .bottom, multiplier: 1, constant: 8.0))
    }
    
    func setUpNavigationController() {
        // set up title bar
        self.navigationController?.navigationBar.topItem?.title = "Sign In"
        // allow user to cancel sign in flow if sign in not mandatory
        if (self.canCancel) {
            let cancelButton = UIBarButtonItem(title: "Cancel", style: .plain, target: self, action: #selector(barButtonClosePressed))
            cancelButton.tintColor = UIColor.white
            self.navigationController?.navigationBar.topItem?.leftBarButtonItem = cancelButton;
        }
        self.navigationController?.navigationBar.titleTextAttributes = [
            NSForegroundColorAttributeName: UIColor.white,
        ]
        self.navigationController?.navigationBar.isTranslucent = false
        self.navigationController?.navigationBar.barTintColor = UIColor.darkGray
        self.navigationController?.navigationBar.tintColor = UIColor.white
    }
    
    func barButtonClosePressed() {
        self.dismiss(animated: true, completion: nil)
        if let didCompleteSignIn = self.didCompleteSignIn {
            didCompleteSignIn(false)
        }
    }
    
    func handleLoginWithSignInProvider(_ signInProvider: AWSSignInProvider) {
        AWSSignInManager.sharedInstance().login(signInProviderKey: signInProvider.identityProviderName, completionHandler: {(result: Any?, authState: AWSIdentityManagerAuthState, error: Error?) in
          //  print("result = \(String(describing: result)), error = \(String(describing: error))")
            // If no error reported by SignInProvider, discard the sign-in view controller.
            if error == nil {
                DispatchQueue.main.async(execute: {
                    self.dismiss(animated: true, completion: nil)
                    if let didCompleteSignIn = self.didCompleteSignIn {
                        didCompleteSignIn(true)
                    }
                })   
                return
            }
            self.showErrorDialog(signInProvider.identityProviderName, withError: error! as NSError)
        })
    }
    
    func showErrorDialog(_ loginProviderName: String, withError error: NSError) {
        print("\(loginProviderName) failed to sign in w/ error: \(error)")
        let alertController = UIAlertController(title: NSLocalizedString("Sign-in Provider Sign-In Error", comment: "Sign-in error for sign-in failure."), message: NSLocalizedString("\(loginProviderName) failed to sign in w/ error: \(error)", comment: "Sign-in message structure for sign-in failure."), preferredStyle: .alert)
        let doneAction = UIAlertAction(title: NSLocalizedString("Ok", comment: "Label to cancel sign-in failure."), style: .cancel, handler: nil)
        alertController.addAction(doneAction)
        present(alertController, animated: true, completion: nil)
    }
    
    func anchorViewForGoogle() -> UIView {
        return orSignInWithLabel
    }
    
}

extension SignInViewController: AWSSignInDelegate {
    // delegate handler for facebook / google sign in.
    func onLogin(signInProvider: AWSSignInProvider, result: Any?, authState: AWSIdentityManagerAuthState, error: Error?) {
        // dismiss view controller if no error
        if error == nil {
            print("Signed in with: \(signInProvider)")
            self.presentingViewController?.dismiss(animated: true, completion: nil)
            if let didCompleteSignIn = self.didCompleteSignIn {
                didCompleteSignIn(true)
            }
            return
        }
        self.showErrorDialog(signInProvider.identityProviderName, withError: error! as NSError)
    }
}
